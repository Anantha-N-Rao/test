{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMdE52WYlqdaIKErmQr8Frv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "d1224a40e3624a2cb302a0cf282cf56f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_26035671139e41e0b058a9fd8673f1a1",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4a17e59135c24d0d89c7742834b444ae",
              "IPY_MODEL_afaf0a92853443f7a0c8ea70c3836c6a",
              "IPY_MODEL_7baa586a71654fa8a99dbb4aea9b8d02"
            ]
          }
        },
        "26035671139e41e0b058a9fd8673f1a1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4a17e59135c24d0d89c7742834b444ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "state": {
            "_view_name": "IntSliderView",
            "style": "IPY_MODEL_f62b8977624c4b009a208eb08e481303",
            "_dom_classes": [],
            "description": "E",
            "step": 5,
            "_model_name": "IntSliderModel",
            "orientation": "horizontal",
            "max": 90,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 0,
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "min": -90,
            "continuous_update": true,
            "readout_format": "d",
            "description_tooltip": null,
            "readout": true,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_760288ae8b99483590c82a2ffda9b718"
          }
        },
        "afaf0a92853443f7a0c8ea70c3836c6a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "state": {
            "_view_name": "IntSliderView",
            "style": "IPY_MODEL_7369cc60e34a4b889aa841a01cf2cc97",
            "_dom_classes": [],
            "description": "A",
            "step": 5,
            "_model_name": "IntSliderModel",
            "orientation": "horizontal",
            "max": 90,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 0,
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "min": -90,
            "continuous_update": true,
            "readout_format": "d",
            "description_tooltip": null,
            "readout": true,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_36a98688c61e45b18a74a14a56af4c06"
          }
        },
        "7baa586a71654fa8a99dbb4aea9b8d02": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "state": {
            "_view_name": "OutputView",
            "msg_id": "",
            "_dom_classes": [],
            "_model_name": "OutputModel",
            "outputs": [
              {
                "output_type": "display_data",
                "metadata": {
                  "tags": [],
                  "needs_background": "light"
                },
                "image/png": "\n",
                "text/plain": "<Figure size 864x576 with 1 Axes>"
              }
            ],
            "_view_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_view_count": null,
            "_view_module_version": "1.0.0",
            "layout": "IPY_MODEL_5163e1ec5b3a43bd975058540d6043e9",
            "_model_module": "@jupyter-widgets/output"
          }
        },
        "f62b8977624c4b009a208eb08e481303": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "state": {
            "_view_name": "StyleView",
            "handle_color": null,
            "_model_name": "SliderStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "760288ae8b99483590c82a2ffda9b718": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "7369cc60e34a4b889aa841a01cf2cc97": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "state": {
            "_view_name": "StyleView",
            "handle_color": null,
            "_model_name": "SliderStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "36a98688c61e45b18a74a14a56af4c06": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5163e1ec5b3a43bd975058540d6043e9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Anantha-N-Rao/test/blob/master/3D_image_rotation_fit\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BTcFUXcfXufG"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "from matplotlib import cm\n",
        "from ipywidgets import interactive\n",
        "from numpy import sin, cos\n",
        "f = lambda x,y,z1,z2: z2*z1*x*y\n",
        "x = np.linspace(1,-1,50)\n",
        "y = np.linspace(-1,1,50)\n",
        "zx1 = np.random.randint(-50,50,5)\n",
        "zx1 = np.repeat(zx1,10)\n",
        "zy1 = np.random.randint(-2,2,25)\n",
        "zy1 = np.repeat(zy1,2)\n",
        "X, Y = np.meshgrid(x,y)\n",
        "zx1,zy1 = np.meshgrid(zx1,zy1)\n",
        "\n",
        "zx2 = np.random.randint(-50,50,50)\n",
        "zx2 = np.repeat(zx2,1)\n",
        "zy2 = np.random.randint(-2,2,25)\n",
        "zy2 = np.repeat(zy2,2)\n",
        "zx2,zy2 = np.meshgrid(zx2,zy2)\n",
        "#Z = np.multiply(zx1,zy1)\n",
        "Z = f(zx2,zy2,zx1,zy1)\n",
        "#zx,zy = np.meshgrid(zx1,zy1)\n",
        "#yy = np.multiply(zx,np.multiply(zy,Z))\n",
        "def plotter(E,A):   \n",
        "    fig = plt.figure(figsize = [12,8])\n",
        "    ax = fig.gca(projection ='3d')\n",
        "    ax.plot_surface(x,y,z, cmap = cm.coolwarm)\n",
        "    ax.view_init(E,A)\n",
        "    plt.show()\n",
        "\n",
        "#plotter(90,0)\n",
        "\n",
        "\n",
        "iplot = interactive(plotter,\n",
        "                    E = (-90,90,5),\n",
        "                    A = (-90,90,5))\n",
        "#plt.contour(X,Y,Z)\n",
        "#plt.imshow(yy)"
      ],
      "execution_count": 207,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p_miS9xObt91"
      },
      "source": [
        "\n",
        "1.   For each datapoint, create a custom terrian in 3d of an arbitrary size (nxn).\n",
        "\n",
        "2.   Project all points in 2D and extract the points between the range (-1,1). This would be the image or points at time t.\n",
        "\n",
        "3.   Apply random rotational transformation on the 3D points. Save the angles as target.\n",
        "\n",
        "4.   Project all transformed points in 2D and extract the points between the range (-1,1). This would be the image or points at time t+1.\n",
        "\n",
        "5.   Check if sparse tensors work for deep learning, and run model.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-PB_KPcAdjzP"
      },
      "source": [
        "Generating a custom 3d terrain of points"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oSv_htfldcrC"
      },
      "source": [
        "def get3dpoints(lim,resolution=64):\n",
        "\n",
        "    f = lambda x,y,z1,z2: z2*z1*x*y\n",
        "\n",
        "    # Setting image boundary\n",
        "    x = np.linspace(-lim,lim,resolution)\n",
        "    y = np.linspace(-lim,lim,resolution)\n",
        "\n",
        "    # Terrain parameters\n",
        "    zx1 = np.random.randint(-50,50,32)\n",
        "    zx1 = np.repeat(zx1,2)\n",
        "    zy1 = np.random.randint(-2,2,16)\n",
        "    zy1 = np.repeat(zy1,4)\n",
        "    X, Y = np.meshgrid(x,y)\n",
        "    zx1,zy1 = np.meshgrid(zx1,zy1)+np.random.random((64,64))*5\n",
        "\n",
        "    zx2 = np.random.randint(-50,50,32)\n",
        "    zx2 = np.repeat(zx2,2)\n",
        "    zy2 = np.random.randint(-2,2,8)\n",
        "    zy2 = np.repeat(zy2,8)\n",
        "    zx2,zy2 = np.meshgrid(zx2,zy2)+np.random.random((64,64))*5\n",
        "\n",
        "    # Generate depth\n",
        "    Z = f(zx2,zy2,zx1,zy1)\n",
        "    return X,Y,Z"
      ],
      "execution_count": 208,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T61KA_6ldiUQ"
      },
      "source": [
        "x,y,z = get3dpoints(10)"
      ],
      "execution_count": 209,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cv8ODtRHixPM"
      },
      "source": [
        "Visualize terrain"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530,
          "referenced_widgets": [
            "d1224a40e3624a2cb302a0cf282cf56f",
            "26035671139e41e0b058a9fd8673f1a1",
            "4a17e59135c24d0d89c7742834b444ae",
            "afaf0a92853443f7a0c8ea70c3836c6a",
            "7baa586a71654fa8a99dbb4aea9b8d02",
            "f62b8977624c4b009a208eb08e481303",
            "760288ae8b99483590c82a2ffda9b718",
            "7369cc60e34a4b889aa841a01cf2cc97",
            "36a98688c61e45b18a74a14a56af4c06",
            "5163e1ec5b3a43bd975058540d6043e9"
          ]
        },
        "id": "ynRUyQQOgb4H",
        "outputId": "9d204c0d-423b-48fa-c876-5f71f6f015d8"
      },
      "source": [
        "def plotter(E,A):   \n",
        "    fig = plt.figure(figsize = [12,8])\n",
        "    ax = fig.gca(projection ='3d')\n",
        "    ax.plot_surface(x,y,z, cmap = cm.coolwarm)\n",
        "    ax.view_init(E,A)\n",
        "    plt.show()\n",
        "\n",
        "#plotter(90,0)\n",
        "\n",
        "iplot = interactive(plotter,\n",
        "                    E = (-90,90,5),\n",
        "                    A = (-90,90,5))\n",
        "iplot"
      ],
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "d1224a40e3624a2cb302a0cf282cf56f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "interactive(children=(IntSlider(value=0, description='E', max=90, min=-90, step=5), IntSlider(value=0, descrip…"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XjwRXiZHsY5j",
        "outputId": "7b5db4af-9cfb-4914-f21a-db33539983ec"
      },
      "source": [
        "def rotation_matrix(alpha,beta,gamma):\n",
        "      Rroll = [[np.cos(alpha), -np.sin(alpha), 0.0],\n",
        "             [np.sin(alpha), np.cos(alpha), 0.0],\n",
        "             [0.0, 0.0, 1]]\n",
        "    \n",
        "      Rpitch = [[np.cos(beta), 0.0, np.sin(beta)],\n",
        "               [0.0, 1, 0.0],\n",
        "               [-np.sin(beta), 0, np.cos(beta)]]\n",
        "    \n",
        "      Ryaw = [[1, 0.0, 0],\n",
        "              [0, np.cos(gamma), -np.sin(gamma)],\n",
        "              [0, np.sin(gamma), np.cos(gamma)]]\n",
        "\n",
        "      return np.matmul(np.matmul(Rroll,Ryaw),Rpitch)\n",
        "   # Rm=[[cos(yaw)*cos(pitch), cos(yaw)*sin(pitch)*sin(roll)-sin(yaw)*cos(roll), cos(yaw)*sin(pitch)*cos(roll)+sin(yaw)*sin(roll)],\n",
        "    #    [sin(yaw)*cos(pitch), sin(yaw)*sin(pitch)*sin(roll)+cos(yaw)*cos(roll), sin(yaw)*sin(pitch)*cos(roll)-cos(yaw)*sin(roll)],\n",
        "     #   [-sin(pitch), cos(pitch)*sin(roll), cos(pitch)*cos(roll)]]\n",
        "    \n",
        "    #return np.asarray(Rm)\n",
        "rotmat = rotation_matrix(0,0,0.1)\n",
        "print(rotmat)"
      ],
      "execution_count": 211,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 1.          0.          0.        ]\n",
            " [ 0.          0.99500417 -0.09983342]\n",
            " [ 0.          0.09983342  0.99500417]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BulRK_S5gc_C",
        "outputId": "66a734d9-434f-4b89-8114-b8313aa119ad"
      },
      "source": [
        "def get_targets():\n",
        "  rot_angles = np.float32([np.random.random()-0.5, \n",
        "                np.random.random()-0.5, \n",
        "                np.random.random()-0.5])\n",
        "  return rot_angles\n",
        "\n",
        "roll,pitch,yaw = [0,0.1,0]\n",
        "rotmat = np.squeeze(rotation_matrix(roll, pitch, yaw))\n",
        "\n",
        "print(roll*180/np.pi,pitch*180/np.pi,yaw*180/np.pi)"
      ],
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.0 5.729577951308232 0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XB6LEcX6N_F_",
        "outputId": "fd2729b1-5c45-4235-a3d8-91ceebe6165b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "roll=[]\n",
        "pitch=[]\n",
        "yaw=[]\n",
        "for i in range(1000):\n",
        "  a,b,c = get_targets()\n",
        "  roll.append(a)\n",
        "  pitch.append(b)\n",
        "  yaw.append(c)\n",
        "\n",
        "plt.plot(yaw)"
      ],
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f7101e9de50>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 213
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YLwocybjxDas"
      },
      "source": [
        "x=np.ravel(x)\n",
        "y=np.ravel(y)\n",
        "z=np.ravel(z)\n",
        "\n",
        "def divide3axis(x,y,z):\n",
        "    x = np.divide(x, z, out=np.zeros_like(x), where=z!=0)\n",
        "    y = np.divide(y, z, out=np.zeros_like(y), where=z!=0)\n",
        "    sz=np.squeeze(np.stack((x,y),1))\n",
        "\n",
        "    for i in range(len(x)):\n",
        "      if (abs(sz[i,0])>10 or (abs(sz[i,1]))>10):\n",
        "        sz[i,:]=[0,0]\n",
        "    return sz\n",
        "\n",
        "sz = divide3axis(x,y,z)\n",
        "\n",
        "def tran_mult(x,y,z,rm):\n",
        "  tx=[]\n",
        "  ty=[]\n",
        "  tz=[]\n",
        "  for i in range(len(x)):\n",
        "    a,b,c = np.matmul(rm,[x[i],y[i],z[i]])\n",
        "    tx.append(a)\n",
        "    ty.append(b)\n",
        "    tz.append(c)\n",
        "  return tx,ty,tz\n",
        "\n",
        "tx,ty,tz = tran_mult(x,y,z,rotmat)\n",
        "tzy = divide3axis(tx,ty,tz)\n",
        "#plt.plot(sz[:,0],sz[:,1],'*b',tzy[:,0],tzy[:,1],'*r')\n",
        "\n",
        "#fig = plt.figure()\n",
        "#ax = Axes3D(fig)\n",
        "#ax.scatter(tx,ty,tz)\n",
        "#np.matmul(rotmat,np.transpose(np.expand_dims([x[0],y[0],z[0]],1)))"
      ],
      "execution_count": 214,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F4NTy9w4FPe0"
      },
      "source": [
        "def getting_data():\n",
        "  inputs = get3dpoints(10)\n",
        "  #print(np.shape(inputs))\n",
        "  x1 = np.ravel(inputs[0])\n",
        "  y1 = np.ravel(inputs[1])\n",
        "  z1 = np.ravel(inputs[2])\n",
        "  #print(np.shape(x1))\n",
        "  targets = get_targets()\n",
        "  rm = np.squeeze(rotation_matrix(targets[0], targets[1], targets[2]))\n",
        "  #print(np.shape(rm))\n",
        "  transformed = tran_mult(x1,y1,z1,rm)\n",
        "  #print(np.shape(transformed))\n",
        "  inputvalues =divide3axis(x1,y1,z1)\n",
        "  #inputvalues = inputvalues/np.amax(abs(inputvalues))\n",
        "\n",
        "  outputvalues =divide3axis(transformed[0],transformed[1],transformed[2])\n",
        "  #outputvalues = outputvalues/np.amax(abs(outputvalues))\n",
        "  values = np.stack((inputvalues, outputvalues))\n",
        "  values = np.float32(np.expand_dims(values,0))\n",
        "  targets = np.squeeze(np.float32(targets))\n",
        "  #print(np.shape(values),0)\n",
        "  yield values,targets\n",
        "\n",
        "p1 = getting_data()"
      ],
      "execution_count": 215,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uAW6iwSTra2B"
      },
      "source": [
        "def getting_data():\n",
        "  inputs = get3dpoints(10)\n",
        "  #print(np.shape(inputs))\n",
        "  x1 = np.ravel(inputs[0])\n",
        "  y1 = np.ravel(inputs[1])\n",
        "  z1 = np.ravel(inputs[2])\n",
        "  #print(np.shape(x1))\n",
        "  targets = get_targets()\n",
        "  #rm = np.squeeze(rotation_matrix(targets[0], targets[1], targets[2]))\n",
        "  rm = np.squeeze(rotation_matrix(0,0.1,0))\n",
        "  #print(np.shape(rm))\n",
        "  transformed = tran_mult(x1,y1,z1,rm)\n",
        "  #print(np.shape(transformed))\n",
        "  inputvalues = divide3axis(x1,y1,z1)\n",
        "  inputvalues = inputvalues[np.argsort(inputvalues[:,0])]\n",
        "  #inputvalues = inputvalues/np.amax(abs(inputvalues))\n",
        "\n",
        "  outputvalues = divide3axis(transformed[0],transformed[1],transformed[2])\n",
        "  outputvalues = outputvalues[np.argsort(outputvalues[:,0])]\n",
        "  #outputvalues = outputvalues/np.amax(abs(outputvalues))\n",
        "  values = np.stack((inputvalues, outputvalues))\n",
        "  #output = values[np.argsort(values[:,0])]\n",
        "  #values = np.float32(np.expand_dims(values,0))\n",
        "  #targets = np.expand_dims(np.float32(targets),0)\n",
        "\n",
        "  #print(np.shape(values),0)\n",
        "  yield values,targets\n",
        "\n",
        "p1 = getting_data()\n",
        "#pp = np.transpose(p1[0], [0,1,3,2])\n",
        "\n",
        "#plt.plot(pp[0,0,0,:],pp[0,0,1,:],'*b', \n",
        " #        pp[0,1,0,:],pp[0,1,1,:],'*r')\n",
        "\n",
        "#print(p3)\n",
        "#plt.plot(pp[0,0,0])\n",
        "#plt.plot(pp[0,1,1])"
      ],
      "execution_count": 339,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QcCnU1k-_VDN"
      },
      "source": [
        "import tensorflow as tf\n",
        "import time"
      ],
      "execution_count": 217,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3iqb-tgO-Fy6"
      },
      "source": [
        "epochs = 1\n",
        "shapes = ((2, 4096,2), (3))\n",
        "dataset = tf.data.Dataset.from_generator(getting_data, output_signature=(\n",
        "                                        tf.TensorSpec(shape=shapes[0], dtype=tf.float32),\n",
        "                                        tf.TensorSpec(shape=shapes[1], dtype=tf.float32)))\n",
        "#dataset = dataset.map(getting_data)\n",
        "dataset = dataset.batch(10)\n",
        "dataset = dataset.prefetch(10)\n",
        "\n",
        "ty = list(dataset.take(1))\n",
        "ts = time.time()"
      ],
      "execution_count": 352,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "gsrEw6L6CC0D",
        "outputId": "e863da72-499e-41fe-d766-aa516e0f316a"
      },
      "source": [
        "inputs = tf.keras.layers.Input((2,4096,2))\n",
        "#i1,i2 = tf.split(inputs,2,-3)\n",
        "i1 = tf.transpose(inputs, [0,1,3,2])\n",
        "shapes = tf.shape(i1)\n",
        "i1 = tf.reshape(i1, [shapes[0], 4, 4096])\n",
        "i1 = tf.keras.layers.Dropout(0.1)(i1)\n",
        "#i2 = tf.squeeze(tf.transpose(i2, [0,1,3,2]))\n",
        "x1 = tf.keras.layers.Conv1D(512, 4,activation = 'relu', use_bias = 'True')(i1)\n",
        "#x2 = tf.keras.layers.Conv1D(512, 3, activation = 'relu', use_bias = 'True')(i2)\n",
        "x1 = tf.keras.layers.LayerNormalization()(x1)\n",
        "#x2 = tf.keras.layers.LayerNormalization(x2)\n",
        "#y1 = tf.keras.layers.Conv1D(128,2, activation = 'relu', use_bias = 'True')(x1)\n",
        "y1 = tf.keras.layers.Flatten()(x1)\n",
        "#y2 = tf.keras.layers.Dense(128,3, activation = 'relu', use_bias = 'True')(x2)\n",
        "z1 = tf.keras.layers.Dense(128, activation = 'relu', kernel_regularizer='l2', use_bias = 'True')(y1)\n",
        "z1 = tf.keras.layers.Dense(128, activation = 'relu', kernel_regularizer='l2',use_bias = 'True')(z1)\n",
        "#z2 = tf.keras.layers.Dense(64, activation = 'relu', use_bias = 'True')(y2)\n",
        "zz = tf.keras.layers.Dense(32, activation = 'relu', use_bias = 'True')(z1)\n",
        "outs = tf.keras.layers.Dense(3, activation = None, use_bias = 'True')(zz)\n",
        "model = tf.keras.Model(inputs = [inputs], outputs =[outs])\n",
        "model.summary()\n",
        "model.compile(optimizer = tf.keras.optimizers.Adam(0.0005), loss = 'mse', metrics = 'mae')\n",
        "\n",
        "history = model.fit(dataset, epochs =10000, verbose =2)"
      ],
      "execution_count": 347,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_22\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_23 (InputLayer)           [(None, 2, 4096, 2)] 0                                            \n",
            "__________________________________________________________________________________________________\n",
            "tf.compat.v1.transpose_14 (TFOp (None, 2, 2, 4096)   0           input_23[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "tf.compat.v1.shape_22 (TFOpLamb (4,)                 0           tf.compat.v1.transpose_14[0][0]  \n",
            "__________________________________________________________________________________________________\n",
            "tf.__operators__.getitem_22 (Sl ()                   0           tf.compat.v1.shape_22[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "tf.reshape_22 (TFOpLambda)      (None, 4, 4096)      0           tf.compat.v1.transpose_14[0][0]  \n",
            "                                                                 tf.__operators__.getitem_22[0][0]\n",
            "__________________________________________________________________________________________________\n",
            "dropout_22 (Dropout)            (None, 4, 4096)      0           tf.reshape_22[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_22 (Conv1D)              (None, 1, 512)       8389120     dropout_22[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "layer_normalization_16 (LayerNo (None, 1, 512)       1024        conv1d_22[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "flatten_22 (Flatten)            (None, 512)          0           layer_normalization_16[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "dense_88 (Dense)                (None, 128)          65664       flatten_22[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "dense_89 (Dense)                (None, 128)          16512       dense_88[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "dense_90 (Dense)                (None, 32)           4128        dense_89[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "dense_91 (Dense)                (None, 3)            99          dense_90[0][0]                   \n",
            "==================================================================================================\n",
            "Total params: 8,476,547\n",
            "Trainable params: 8,476,547\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n",
            "Epoch 1/10000\n",
            "1/1 - 1s - loss: 4.0238 - mae: 0.7907\n",
            "Epoch 2/10000\n",
            "1/1 - 0s - loss: 3.6132 - mae: 0.3959\n",
            "Epoch 3/10000\n",
            "1/1 - 0s - loss: 3.2953 - mae: 0.1398\n",
            "Epoch 4/10000\n",
            "1/1 - 0s - loss: 4.0518 - mae: 0.7263\n",
            "Epoch 5/10000\n",
            "1/1 - 0s - loss: 3.3980 - mae: 0.3765\n",
            "Epoch 6/10000\n",
            "1/1 - 0s - loss: 3.3942 - mae: 0.3111\n",
            "Epoch 7/10000\n",
            "1/1 - 0s - loss: 3.7658 - mae: 0.6323\n",
            "Epoch 8/10000\n",
            "1/1 - 0s - loss: 3.8237 - mae: 0.5994\n",
            "Epoch 9/10000\n",
            "1/1 - 0s - loss: 3.3822 - mae: 0.3089\n",
            "Epoch 10/10000\n",
            "1/1 - 0s - loss: 3.4266 - mae: 0.4654\n",
            "Epoch 11/10000\n",
            "1/1 - 0s - loss: 3.2874 - mae: 0.3395\n",
            "Epoch 12/10000\n",
            "1/1 - 0s - loss: 3.2658 - mae: 0.2859\n",
            "Epoch 13/10000\n",
            "1/1 - 0s - loss: 3.2438 - mae: 0.2433\n",
            "Epoch 14/10000\n",
            "1/1 - 0s - loss: 3.2517 - mae: 0.2674\n",
            "Epoch 15/10000\n",
            "1/1 - 0s - loss: 3.3644 - mae: 0.4875\n",
            "Epoch 16/10000\n",
            "1/1 - 0s - loss: 3.1985 - mae: 0.2737\n",
            "Epoch 17/10000\n",
            "1/1 - 0s - loss: 3.4292 - mae: 0.4788\n",
            "Epoch 18/10000\n",
            "1/1 - 0s - loss: 3.3269 - mae: 0.4830\n",
            "Epoch 19/10000\n",
            "1/1 - 0s - loss: 3.1096 - mae: 0.1575\n",
            "Epoch 20/10000\n",
            "1/1 - 0s - loss: 3.1416 - mae: 0.2379\n",
            "Epoch 21/10000\n",
            "1/1 - 0s - loss: 3.2205 - mae: 0.4046\n",
            "Epoch 22/10000\n",
            "1/1 - 0s - loss: 3.4602 - mae: 0.6178\n",
            "Epoch 23/10000\n",
            "1/1 - 0s - loss: 3.2955 - mae: 0.4749\n",
            "Epoch 24/10000\n",
            "1/1 - 0s - loss: 3.2140 - mae: 0.4271\n",
            "Epoch 25/10000\n",
            "1/1 - 0s - loss: 3.2217 - mae: 0.3482\n",
            "Epoch 26/10000\n",
            "1/1 - 0s - loss: 3.0363 - mae: 0.1930\n",
            "Epoch 27/10000\n",
            "1/1 - 0s - loss: 3.0343 - mae: 0.2166\n",
            "Epoch 28/10000\n",
            "1/1 - 0s - loss: 3.0856 - mae: 0.3104\n",
            "Epoch 29/10000\n",
            "1/1 - 0s - loss: 3.0827 - mae: 0.3029\n",
            "Epoch 30/10000\n",
            "1/1 - 0s - loss: 3.0138 - mae: 0.2489\n",
            "Epoch 31/10000\n",
            "1/1 - 0s - loss: 2.9779 - mae: 0.1936\n",
            "Epoch 32/10000\n",
            "1/1 - 0s - loss: 3.0090 - mae: 0.2656\n",
            "Epoch 33/10000\n",
            "1/1 - 0s - loss: 3.0636 - mae: 0.3748\n",
            "Epoch 34/10000\n",
            "1/1 - 0s - loss: 3.0287 - mae: 0.3291\n",
            "Epoch 35/10000\n",
            "1/1 - 0s - loss: 3.2190 - mae: 0.5158\n",
            "Epoch 36/10000\n",
            "1/1 - 0s - loss: 3.0126 - mae: 0.3227\n",
            "Epoch 37/10000\n",
            "1/1 - 0s - loss: 3.0976 - mae: 0.4243\n",
            "Epoch 38/10000\n",
            "1/1 - 0s - loss: 3.0376 - mae: 0.4080\n",
            "Epoch 39/10000\n",
            "1/1 - 0s - loss: 3.0468 - mae: 0.3310\n",
            "Epoch 40/10000\n",
            "1/1 - 0s - loss: 2.9534 - mae: 0.2501\n",
            "Epoch 41/10000\n",
            "1/1 - 0s - loss: 2.9812 - mae: 0.3268\n",
            "Epoch 42/10000\n",
            "1/1 - 0s - loss: 3.3128 - mae: 0.6800\n",
            "Epoch 43/10000\n",
            "1/1 - 0s - loss: 2.9707 - mae: 0.3645\n",
            "Epoch 44/10000\n",
            "1/1 - 0s - loss: 2.9134 - mae: 0.2915\n",
            "Epoch 45/10000\n",
            "1/1 - 0s - loss: 3.0377 - mae: 0.4451\n",
            "Epoch 46/10000\n",
            "1/1 - 0s - loss: 2.8446 - mae: 0.2355\n",
            "Epoch 47/10000\n",
            "1/1 - 0s - loss: 2.9517 - mae: 0.4083\n",
            "Epoch 48/10000\n",
            "1/1 - 0s - loss: 2.8969 - mae: 0.3349\n",
            "Epoch 49/10000\n",
            "1/1 - 0s - loss: 2.8429 - mae: 0.2616\n",
            "Epoch 50/10000\n",
            "1/1 - 0s - loss: 2.8731 - mae: 0.2975\n",
            "Epoch 51/10000\n",
            "1/1 - 0s - loss: 2.9761 - mae: 0.4603\n",
            "Epoch 52/10000\n",
            "1/1 - 0s - loss: 3.1095 - mae: 0.5405\n",
            "Epoch 53/10000\n",
            "1/1 - 0s - loss: 3.2134 - mae: 0.6793\n",
            "Epoch 54/10000\n",
            "1/1 - 0s - loss: 2.7354 - mae: 0.2031\n",
            "Epoch 55/10000\n",
            "1/1 - 0s - loss: 2.7568 - mae: 0.2431\n",
            "Epoch 56/10000\n",
            "1/1 - 0s - loss: 2.7892 - mae: 0.2984\n",
            "Epoch 57/10000\n",
            "1/1 - 0s - loss: 2.7925 - mae: 0.3179\n",
            "Epoch 58/10000\n",
            "1/1 - 0s - loss: 2.7331 - mae: 0.2842\n",
            "Epoch 59/10000\n",
            "1/1 - 0s - loss: 2.7883 - mae: 0.3488\n",
            "Epoch 60/10000\n",
            "1/1 - 0s - loss: 2.7745 - mae: 0.2933\n",
            "Epoch 61/10000\n",
            "1/1 - 0s - loss: 2.9155 - mae: 0.5186\n",
            "Epoch 62/10000\n",
            "1/1 - 0s - loss: 2.8059 - mae: 0.3520\n",
            "Epoch 63/10000\n",
            "1/1 - 0s - loss: 2.6662 - mae: 0.2337\n",
            "Epoch 64/10000\n",
            "1/1 - 0s - loss: 2.6670 - mae: 0.2610\n",
            "Epoch 65/10000\n",
            "1/1 - 0s - loss: 2.8605 - mae: 0.4998\n",
            "Epoch 66/10000\n",
            "1/1 - 0s - loss: 2.6653 - mae: 0.2751\n",
            "Epoch 67/10000\n",
            "1/1 - 0s - loss: 2.7694 - mae: 0.4530\n",
            "Epoch 68/10000\n",
            "1/1 - 0s - loss: 2.6106 - mae: 0.2188\n",
            "Epoch 69/10000\n",
            "1/1 - 0s - loss: 2.7246 - mae: 0.3265\n",
            "Epoch 70/10000\n",
            "1/1 - 0s - loss: 2.7259 - mae: 0.3946\n",
            "Epoch 71/10000\n",
            "1/1 - 0s - loss: 2.5926 - mae: 0.2081\n",
            "Epoch 72/10000\n",
            "1/1 - 0s - loss: 2.6387 - mae: 0.2971\n",
            "Epoch 73/10000\n",
            "1/1 - 0s - loss: 2.5364 - mae: 0.1553\n",
            "Epoch 74/10000\n",
            "1/1 - 0s - loss: 2.5317 - mae: 0.1407\n",
            "Epoch 75/10000\n",
            "1/1 - 0s - loss: 2.5354 - mae: 0.1861\n",
            "Epoch 76/10000\n",
            "1/1 - 0s - loss: 2.6110 - mae: 0.2945\n",
            "Epoch 77/10000\n",
            "1/1 - 0s - loss: 2.5241 - mae: 0.2062\n",
            "Epoch 78/10000\n",
            "1/1 - 0s - loss: 2.6127 - mae: 0.3427\n",
            "Epoch 79/10000\n",
            "1/1 - 0s - loss: 2.4988 - mae: 0.2130\n",
            "Epoch 80/10000\n",
            "1/1 - 0s - loss: 2.4817 - mae: 0.1670\n",
            "Epoch 81/10000\n",
            "1/1 - 0s - loss: 2.5636 - mae: 0.2963\n",
            "Epoch 82/10000\n",
            "1/1 - 0s - loss: 2.7808 - mae: 0.5790\n",
            "Epoch 83/10000\n",
            "1/1 - 0s - loss: 2.5470 - mae: 0.3282\n",
            "Epoch 84/10000\n",
            "1/1 - 0s - loss: 2.4884 - mae: 0.2472\n",
            "Epoch 85/10000\n",
            "1/1 - 0s - loss: 2.4874 - mae: 0.2436\n",
            "Epoch 86/10000\n",
            "1/1 - 0s - loss: 2.4784 - mae: 0.2684\n",
            "Epoch 87/10000\n",
            "1/1 - 0s - loss: 2.4754 - mae: 0.2568\n",
            "Epoch 88/10000\n",
            "1/1 - 0s - loss: 2.4653 - mae: 0.2504\n",
            "Epoch 89/10000\n",
            "1/1 - 0s - loss: 2.4035 - mae: 0.1850\n",
            "Epoch 90/10000\n",
            "1/1 - 0s - loss: 2.5653 - mae: 0.3657\n",
            "Epoch 91/10000\n",
            "1/1 - 0s - loss: 2.6241 - mae: 0.4148\n",
            "Epoch 92/10000\n",
            "1/1 - 0s - loss: 2.4660 - mae: 0.2910\n",
            "Epoch 93/10000\n",
            "1/1 - 0s - loss: 2.4700 - mae: 0.2570\n",
            "Epoch 94/10000\n",
            "1/1 - 0s - loss: 2.5767 - mae: 0.4682\n",
            "Epoch 95/10000\n",
            "1/1 - 0s - loss: 2.3757 - mae: 0.1845\n",
            "Epoch 96/10000\n",
            "1/1 - 0s - loss: 2.4236 - mae: 0.2818\n",
            "Epoch 97/10000\n",
            "1/1 - 0s - loss: 2.4182 - mae: 0.2467\n",
            "Epoch 98/10000\n",
            "1/1 - 0s - loss: 2.2985 - mae: 0.1048\n",
            "Epoch 99/10000\n",
            "1/1 - 0s - loss: 2.4131 - mae: 0.2834\n",
            "Epoch 100/10000\n",
            "1/1 - 0s - loss: 2.2978 - mae: 0.1401\n",
            "Epoch 101/10000\n",
            "1/1 - 0s - loss: 2.4160 - mae: 0.3890\n",
            "Epoch 102/10000\n",
            "1/1 - 0s - loss: 2.3939 - mae: 0.3467\n",
            "Epoch 103/10000\n",
            "1/1 - 0s - loss: 2.5141 - mae: 0.4342\n",
            "Epoch 104/10000\n",
            "1/1 - 0s - loss: 2.4922 - mae: 0.4744\n",
            "Epoch 105/10000\n",
            "1/1 - 0s - loss: 2.3203 - mae: 0.2964\n",
            "Epoch 106/10000\n",
            "1/1 - 0s - loss: 2.4426 - mae: 0.4362\n",
            "Epoch 107/10000\n",
            "1/1 - 0s - loss: 2.3903 - mae: 0.3396\n",
            "Epoch 108/10000\n",
            "1/1 - 0s - loss: 2.2906 - mae: 0.2696\n",
            "Epoch 109/10000\n",
            "1/1 - 0s - loss: 2.2844 - mae: 0.2667\n",
            "Epoch 110/10000\n",
            "1/1 - 0s - loss: 2.2736 - mae: 0.2485\n",
            "Epoch 111/10000\n",
            "1/1 - 0s - loss: 2.2246 - mae: 0.1922\n",
            "Epoch 112/10000\n",
            "1/1 - 0s - loss: 2.2069 - mae: 0.1837\n",
            "Epoch 113/10000\n",
            "1/1 - 0s - loss: 2.2072 - mae: 0.1862\n",
            "Epoch 114/10000\n",
            "1/1 - 0s - loss: 2.2279 - mae: 0.2020\n",
            "Epoch 115/10000\n",
            "1/1 - 0s - loss: 2.2879 - mae: 0.3058\n",
            "Epoch 116/10000\n",
            "1/1 - 0s - loss: 2.3928 - mae: 0.4808\n",
            "Epoch 117/10000\n",
            "1/1 - 0s - loss: 2.2864 - mae: 0.3498\n",
            "Epoch 118/10000\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-347-bb4abecdcadf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.0005\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'mse'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetrics\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'mae'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 734
        },
        "id": "jVVCAH3SMbZ7",
        "outputId": "fc99f7c9-b8a6-4900-97f7-8e0fae6d4f76"
      },
      "source": [
        "print(time.time()-ts)\n",
        "fig = plt.figure(figsize = [12,12])\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['mae'])"
      ],
      "execution_count": 220,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "974.8114256858826\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f7101b673d0>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 220
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x864 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RTmT3jQrPZam"
      },
      "source": [
        "tv=model.trainable_variables\n",
        "tshape=[]\n",
        "for i in range(len(tv)):\n",
        "  tshape.append(tf.shape(tv[i]))"
      ],
      "execution_count": 221,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 111
        },
        "id": "w_wPhp0CPtnl",
        "outputId": "d1ea03b9-d861-450b-d69c-6130dd399adb"
      },
      "source": [
        "fig = plt.figure(figsize=[12,8])\n",
        "plt.imshow(tf.transpose(tv[0][0]))"
      ],
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7101acab10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 222
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NIVVqHtwTseT",
        "outputId": "9c02c7c2-e631-4eaf-942a-f3900b4ea905"
      },
      "source": [
        "ty=list(dataset.take(1))\n",
        "print(model(ty[0][0]))\n",
        "print(ty[0][1])"
      ],
      "execution_count": 345,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor([[-0.0019567  -0.00389468  0.00888453]], shape=(1, 3), dtype=float32)\n",
            "tf.Tensor([[-0.12001985 -0.16813287  0.21922995]], shape=(1, 3), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}